//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class MatchesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves a match by its ID.
     * @param id The ID of the match to retrieve.
     * @return OK
     */
    getMatch(id: number): Promise<MatchDto> {
        let url_ = this.baseUrl + "/Matches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMatch(_response);
        });
    }

    protected processGetMatch(response: Response): Promise<MatchDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MatchDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto>(null as any);
    }

    /**
     * Updates a match with the provided details.
     * @param matchId The id of the match to update
     * @param winnerId (optional) Gets or sets the ID of the winner.
     * @param news (optional) Gets or sets the news related to the match.
     * @param extraInfo1 (optional) Gets or sets the extra information 1 of the match.
     * @param extraInfo2 (optional) Gets or sets the extra information 2 of the match.
     * @param updateWinner (optional) Gets or sets a value indicating whether to update the winner.
     * @param scores Gets or sets the scores of the players.
     * @return OK
     */
    updateMatch(matchId: number, winnerId: number | undefined, news: string | undefined, extraInfo1: string | undefined, extraInfo2: string | undefined, updateWinner: boolean | undefined, scores: UpdateScoreDto[]): Promise<MatchDto> {
        let url_ = this.baseUrl + "/Matches/{matchId}?";
        if (matchId === undefined || matchId === null)
            throw new Error("The parameter 'matchId' must be defined.");
        url_ = url_.replace("{matchId}", encodeURIComponent("" + matchId));
        if (winnerId === null)
            throw new Error("The parameter 'winnerId' cannot be null.");
        else if (winnerId !== undefined)
            url_ += "WinnerId=" + encodeURIComponent("" + winnerId) + "&";
        if (news === null)
            throw new Error("The parameter 'news' cannot be null.");
        else if (news !== undefined)
            url_ += "News=" + encodeURIComponent("" + news) + "&";
        if (extraInfo1 === null)
            throw new Error("The parameter 'extraInfo1' cannot be null.");
        else if (extraInfo1 !== undefined)
            url_ += "ExtraInfo1=" + encodeURIComponent("" + extraInfo1) + "&";
        if (extraInfo2 === null)
            throw new Error("The parameter 'extraInfo2' cannot be null.");
        else if (extraInfo2 !== undefined)
            url_ += "ExtraInfo2=" + encodeURIComponent("" + extraInfo2) + "&";
        if (updateWinner === null)
            throw new Error("The parameter 'updateWinner' cannot be null.");
        else if (updateWinner !== undefined)
            url_ += "UpdateWinner=" + encodeURIComponent("" + updateWinner) + "&";
        if (scores === undefined || scores === null)
            throw new Error("The parameter 'scores' must be defined and cannot be null.");
        else
            scores && scores.forEach((item, index) => {
                for (const attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Scores[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMatch(_response);
        });
    }

    protected processUpdateMatch(response: Response): Promise<MatchDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MatchDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto>(null as any);
    }

    /**
     * Retrieves all matches.
     * @return OK
     */
    getAllMatches(): Promise<MatchDto[]> {
        let url_ = this.baseUrl + "/Matches";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllMatches(_response);
        });
    }

    protected processGetAllMatches(response: Response): Promise<MatchDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MatchDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchDto[]>(null as any);
    }

    /**
     * Adds a new match.
     * @param player1Id (optional) Player 1 id
     * @param player2Id (optional) Player 2 id
     * @param numberOfSets (optional) The number of sets
     * @return Created
     */
    createMatch(player1Id: number | undefined, player2Id: number | undefined, numberOfSets: NumberOfSets | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Matches?";
        if (player1Id === null)
            throw new Error("The parameter 'player1Id' cannot be null.");
        else if (player1Id !== undefined)
            url_ += "player1Id=" + encodeURIComponent("" + player1Id) + "&";
        if (player2Id === null)
            throw new Error("The parameter 'player2Id' cannot be null.");
        else if (player2Id !== undefined)
            url_ += "player2Id=" + encodeURIComponent("" + player2Id) + "&";
        if (numberOfSets === null)
            throw new Error("The parameter 'numberOfSets' cannot be null.");
        else if (numberOfSets !== undefined)
            url_ += "numberOfSets=" + encodeURIComponent("" + numberOfSets) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMatch(_response);
        });
    }

    protected processCreateMatch(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * Deletes a match by its ID.
     * @param id (optional) The ID of the match to delete.
     * @return OK
     */
    deleteMatch(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Matches?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMatch(_response);
        });
    }

    protected processDeleteMatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class NewsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves the latest news.
     * @param count Number of latest news
     * @return OK
     */
    getLatestNews(count: number): Promise<NewsDto[]> {
        let url_ = this.baseUrl + "/News/latest/{count}";
        if (count === undefined || count === null)
            throw new Error("The parameter 'count' must be defined.");
        url_ = url_.replace("{count}", encodeURIComponent("" + count));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLatestNews(_response);
        });
    }

    protected processGetLatestNews(response: Response): Promise<NewsDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewsDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewsDto[]>(null as any);
    }
}

export class RankingsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves all rankings.
     * @return OK
     */
    getAllRankings(): Promise<RankingDto[]> {
        let url_ = this.baseUrl + "/Rankings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllRankings(_response);
        });
    }

    protected processGetAllRankings(response: Response): Promise<RankingDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RankingDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RankingDto[]>(null as any);
    }
}

export class RulesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves a rule by its ID.
     * @param id The ID of the rule to retrieve.
     * @return OK
     */
    getRule(id: number): Promise<RuleDto> {
        let url_ = this.baseUrl + "/Rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRule(_response);
        });
    }

    protected processGetRule(response: Response): Promise<RuleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RuleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RuleDto>(null as any);
    }

    /**
     * Retrieves all rules.
     * @return OK
     */
    getAllRules(): Promise<RuleDto[]> {
        let url_ = this.baseUrl + "/Rules";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllRules(_response);
        });
    }

    protected processGetAllRules(response: Response): Promise<RuleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RuleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RuleDto[]>(null as any);
    }

    /**
     * Adds a new rule.
     * @param id (optional) Gets or sets the ID of the rule.
     * @param english Gets or sets the English text of the rule.
     * @param danish Gets or sets the Danish text of the rule.
     * @return Created
     */
    createRule(id: number | undefined, english: string, danish: string): Promise<void> {
        let url_ = this.baseUrl + "/Rules?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (english === undefined || english === null)
            throw new Error("The parameter 'english' must be defined and cannot be null.");
        else
            url_ += "English=" + encodeURIComponent("" + english) + "&";
        if (danish === undefined || danish === null)
            throw new Error("The parameter 'danish' must be defined and cannot be null.");
        else
            url_ += "Danish=" + encodeURIComponent("" + danish) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateRule(_response);
        });
    }

    protected processCreateRule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Deletes a rule by its ID.
     * @param id (optional) The ID of the rule to delete.
     * @return OK
     */
    deleteRule(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Rules?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRule(_response);
        });
    }

    protected processDeleteRule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves a user by their ID.
     * @param id The ID of the user to retrieve.
     * @return OK
     */
    getUser(id: number): Promise<UserDto> {
        let url_ = this.baseUrl + "/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(null as any);
    }

    /**
     * Retrieves all users.
     * @return OK
     */
    getAllUsers(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }

    /**
     * Adds a new user.
     * @param name (optional) The name of the player
     * @param initials (optional) The initials of the player
     * @return Created
     */
    createUser(name: string | undefined, initials: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Users?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (initials === null)
            throw new Error("The parameter 'initials' cannot be null.");
        else if (initials !== undefined)
            url_ += "initials=" + encodeURIComponent("" + initials) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Deletes a user by their ID.
     * @param id (optional) The ID of the user to delete.
     * @return OK
     */
    deleteUser(id: number | undefined): Promise<User> {
        let url_ = this.baseUrl + "/Users?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }
}

/** Data transfer object for a match. */
export class MatchDto implements IMatchDto {
    /** Gets or sets the ID of the match. */
    id?: number;
    /** Gets or sets the first player of the match. */
    players!: PlayerDto[] | undefined;
    /** Gets or sets the date of the match. */
    date?: Date | undefined;
    numberOfSets?: NumberOfSets;
    /** Determines whether the match is finished. */
    isFinished?: boolean;
    /** Gets or sets the news related to the match. */
    news?: string | undefined;
    /** Gets or sets the extra information 1 of the match. */
    extraInfo1?: string | undefined;
    /** Gets or sets the extra information 2 of the match. */
    extraInfo2?: string | undefined;

    constructor(data?: IMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(PlayerDto.fromJS(item));
            }
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.numberOfSets = _data["numberOfSets"];
            this.isFinished = _data["isFinished"];
            this.news = _data["news"];
            this.extraInfo1 = _data["extraInfo1"];
            this.extraInfo2 = _data["extraInfo2"];
        }
    }

    static fromJS(data: any): MatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["numberOfSets"] = this.numberOfSets;
        data["isFinished"] = this.isFinished;
        data["news"] = this.news;
        data["extraInfo1"] = this.extraInfo1;
        data["extraInfo2"] = this.extraInfo2;
        return data;
    }
}

/** Data transfer object for a match. */
export interface IMatchDto {
    /** Gets or sets the ID of the match. */
    id?: number;
    /** Gets or sets the first player of the match. */
    players: PlayerDto[] | undefined;
    /** Gets or sets the date of the match. */
    date?: Date | undefined;
    numberOfSets?: NumberOfSets;
    /** Determines whether the match is finished. */
    isFinished?: boolean;
    /** Gets or sets the news related to the match. */
    news?: string | undefined;
    /** Gets or sets the extra information 1 of the match. */
    extraInfo1?: string | undefined;
    /** Gets or sets the extra information 2 of the match. */
    extraInfo2?: string | undefined;
}

/** Data Transfer Object for News */
export class NewsDto implements INewsDto {
    /** Gets or sets the news content. */
    news!: string | undefined;
    /** Gets or sets the date of the news. */
    date?: Date;

    constructor(data?: INewsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.news = _data["news"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NewsDto {
        data = typeof data === 'object' ? data : {};
        let result = new NewsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["news"] = this.news;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

/** Data Transfer Object for News */
export interface INewsDto {
    /** Gets or sets the news content. */
    news: string | undefined;
    /** Gets or sets the date of the news. */
    date?: Date;
}

export enum NumberOfSets {
    _3 = 3,
    _5 = 5,
}

export class Player implements IPlayer {
    id?: number;
    user!: User;
    isWinner?: boolean;
    score?: number;
    elo?: number;
    matchId?: number;

    constructor(data?: IPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new User();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : new User();
            this.isWinner = _data["isWinner"];
            this.score = _data["score"];
            this.elo = _data["elo"];
            this.matchId = _data["matchId"];
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["isWinner"] = this.isWinner;
        data["score"] = this.score;
        data["elo"] = this.elo;
        data["matchId"] = this.matchId;
        return data;
    }
}

export interface IPlayer {
    id?: number;
    user: User;
    isWinner?: boolean;
    score?: number;
    elo?: number;
    matchId?: number;
}

/** Data transfer object for a player. */
export class PlayerDto implements IPlayerDto {
    user!: UserDto;
    /** Gets or sets a value indicating whether the player is the winner. */
    isWinner?: boolean;
    /** Gets or sets the score of the player. */
    score?: number;
    /** Gets or sets the Elo rating of the player. */
    elo?: number;

    constructor(data?: IPlayerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : new UserDto();
            this.isWinner = _data["isWinner"];
            this.score = _data["score"];
            this.elo = _data["elo"];
        }
    }

    static fromJS(data: any): PlayerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["isWinner"] = this.isWinner;
        data["score"] = this.score;
        data["elo"] = this.elo;
        return data;
    }
}

/** Data transfer object for a player. */
export interface IPlayerDto {
    user: UserDto;
    /** Gets or sets a value indicating whether the player is the winner. */
    isWinner?: boolean;
    /** Gets or sets the score of the player. */
    score?: number;
    /** Gets or sets the Elo rating of the player. */
    elo?: number;
}

/** Data Transfer Object for Ranking */
export class RankingDto implements IRankingDto {
    /** Gets or sets the name of the ranking. */
    name!: string | undefined;
    /** Gets or sets the number of games played. */
    gamesPlayed?: number;
    /** Gets or sets the number of wins. */
    wins?: number;
    /** Gets or sets the number of losses. */
    losses?: number;
    /** Gets or sets the win percentage. */
    winPercentage?: number;
    /** Gets or sets the Elo rating. */
    elo?: number;
    /** Gets or sets the TAA rating. */
    taa?: number;

    constructor(data?: IRankingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.gamesPlayed = _data["gamesPlayed"];
            this.wins = _data["wins"];
            this.losses = _data["losses"];
            this.winPercentage = _data["winPercentage"];
            this.elo = _data["elo"];
            this.taa = _data["taa"];
        }
    }

    static fromJS(data: any): RankingDto {
        data = typeof data === 'object' ? data : {};
        let result = new RankingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["gamesPlayed"] = this.gamesPlayed;
        data["wins"] = this.wins;
        data["losses"] = this.losses;
        data["winPercentage"] = this.winPercentage;
        data["elo"] = this.elo;
        data["taa"] = this.taa;
        return data;
    }
}

/** Data Transfer Object for Ranking */
export interface IRankingDto {
    /** Gets or sets the name of the ranking. */
    name: string | undefined;
    /** Gets or sets the number of games played. */
    gamesPlayed?: number;
    /** Gets or sets the number of wins. */
    wins?: number;
    /** Gets or sets the number of losses. */
    losses?: number;
    /** Gets or sets the win percentage. */
    winPercentage?: number;
    /** Gets or sets the Elo rating. */
    elo?: number;
    /** Gets or sets the TAA rating. */
    taa?: number;
}

/** Data Transfer Object for Rule */
export class RuleDto implements IRuleDto {
    /** Gets or sets the ID of the rule. */
    id?: number;
    /** Gets or sets the English text of the rule. */
    english!: string | undefined;
    /** Gets or sets the Danish text of the rule. */
    danish!: string | undefined;

    constructor(data?: IRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.english = _data["english"];
            this.danish = _data["danish"];
        }
    }

    static fromJS(data: any): RuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["english"] = this.english;
        data["danish"] = this.danish;
        return data;
    }
}

/** Data Transfer Object for Rule */
export interface IRuleDto {
    /** Gets or sets the ID of the rule. */
    id?: number;
    /** Gets or sets the English text of the rule. */
    english: string | undefined;
    /** Gets or sets the Danish text of the rule. */
    danish: string | undefined;
}

/** Represents the score update for a player. */
export class UpdateScoreDto implements IUpdateScoreDto {
    /** Gets or sets the ID of the player. */
    playerId?: number;
    /** Gets or sets the score of the player. */
    score?: number;

    constructor(data?: IUpdateScoreDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): UpdateScoreDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateScoreDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["score"] = this.score;
        return data;
    }
}

/** Represents the score update for a player. */
export interface IUpdateScoreDto {
    /** Gets or sets the ID of the player. */
    playerId?: number;
    /** Gets or sets the score of the player. */
    score?: number;
}

export class User implements IUser {
    id?: number;
    name!: string | undefined;
    initials!: string | undefined;
    elo?: number;
    players?: Player[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.initials = _data["initials"];
            this.elo = _data["elo"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(Player.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["initials"] = this.initials;
        data["elo"] = this.elo;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    id?: number;
    name: string | undefined;
    initials: string | undefined;
    elo?: number;
    players?: Player[] | undefined;
}

/** Data Transfer Object for User */
export class UserDto implements IUserDto {
    /** Gets or sets the ID of the user. */
    id?: number;
    /** Gets or sets the name of the user. */
    name!: string | undefined;
    /** Gets or sets the initials of the user. */
    initials!: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.initials = _data["initials"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["initials"] = this.initials;
        return data;
    }
}

/** Data Transfer Object for User */
export interface IUserDto {
    /** Gets or sets the ID of the user. */
    id?: number;
    /** Gets or sets the name of the user. */
    name: string | undefined;
    /** Gets or sets the initials of the user. */
    initials: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}